{"version":3,"sources":["Form/ShowDate/index.js","Form/currencies.js","Form/ShowResult/index.js","Form/index.js","Header/index.js","Section/index.js","Main/index.js","Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["ShowDate","useState","Date","toLocaleString","showDate","setShowDate","useEffect","intervalId","setInterval","clearInterval","className","currencies","name","rate","shortName","ShowResult","result","undefined","sourceAmount","toFixed","currencyHave","targetAmount","currencyWant","Form","calculateResult","setCurrencyHave","setCurrencyWant","amount","setAmount","onSubmit","event","preventDefault","value","onChange","target","map","currency","key","type","required","step","Header","title","Section","href","rel","Main","children","Wrapper","App","setResult","currencyHaveRate","find","currencyWantRate","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ebc68a02.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './style.css'\r\n\r\nconst ShowDate = () => {\r\n    \r\n    const [showDate, setShowDate] = useState( new Date().toLocaleString());\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval( () => {\r\n        setShowDate( showDate => new Date().toLocaleString() )\r\n    }, 1000);\r\n\r\n    return () => {clearInterval(intervalId)\r\n    };\r\n    }, []);\r\n\r\nreturn(\r\n\r\n<p className = \"form__showDate\">\r\n Aktualna data i godzina: {showDate}\r\n</p>\r\n);\r\n}\r\n\r\nexport default ShowDate;","\r\nconst currencies = [\r\n{\r\n  name:\"zloty\",\r\n  rate:1,\r\n  shortName:\"PLN\",\r\n},\r\n{\r\n  name:\"euro\",\r\n  rate:4.4722,\r\n  shortName:\"EUR\",\r\n},\r\n{\r\n  name:\"usDollar\",\r\n  rate:3.9604,\r\n  shortName:\"USD\",\r\n},\r\n{\r\n  name:\"british pound\",\r\n  rate:4.9773,\r\n  shortName:\"GBP\",\r\n},\r\n{\r\n  name:\"swiss frank\",\r\n  rate:4.2049,\r\n  shortName:\"CHF\",\r\n},\r\n];\r\n\r\nexport default currencies;","import React from \"react\";\r\n\r\n\r\n const ShowResult = ({result}) => (\r\n\r\n  <p className=\"form__result \">\r\n   {result !== undefined && (\r\n    <>\r\n      {result.sourceAmount.toFixed(2)}&nbsp;{result.currencyHave}&nbsp;= {\"\"}\r\n      {result.targetAmount.toFixed(2)}&nbsp;{result.currencyWant}&nbsp;\r\n    </>\r\n   )}\r\n  </p>\r\n );\r\n\r\n export default ShowResult;","import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\nimport ShowDate from \"./ShowDate\"\r\nimport currencies from \"./currencies\";\r\nimport ShowResult from \"./ShowResult\";\r\n\r\nconst Form = ({ calculateResult ,result }) => {\r\n\r\n  const [currencyHave, setCurrencyHave] = useState(currencies[0].shortName);\r\n  const [currencyWant, setCurrencyWant] = useState(currencies[1].shortName);\r\n  const [amount, setAmount] = useState(\"\"); \r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    calculateResult(currencyHave, currencyWant, amount)\r\n  };\r\n\r\n\r\n  return( \r\n\r\n  <form className=\"form\" onSubmit={onSubmit}>\r\n  <fieldset className=\"form__fieldset\">\r\n  <ShowDate/>\r\n    <legend className=\"form__legend\">\r\n      Wymiana waluty\r\n    </legend>\r\n    <p className=\" form__paragraph\">Pole oznaczone * musi zostać wypełnione</p>\r\n    <p><label>\r\n      <span className=\"form__labelText\">wymiana z: \r\n        <span className=\"form__span\">(wybierz walutę)</span>\r\n      </span>\r\n      <select\r\n        value={currencyHave}\r\n        onChange = {( {target} ) => setCurrencyHave(target.value)}\r\n        className= \"form__select\"\r\n        name=\"currencyHave\"\r\n      >\r\n        {currencies.map(currency =>(\r\n          <option\r\n            key={currency.shortName}\r\n            value={currency.shortName}\r\n          >\r\n            {currency.shortName}\r\n          </option>))}\r\n      </select>\r\n      </label></p>\r\n      <p><label>\r\n      <span className=\"form__labelText\">wymiana na: \r\n        <span className=\"form__span\">(wybierz walutę)</span>\r\n      </span>\r\n      <select\r\n        value={currencyWant}\r\n        onChange = {( {target} ) => setCurrencyWant(target.value)}\r\n        className=\"form__select \"\r\n        name=\"currencyWant\"\r\n      >\r\n        {currencies.map(currency =>(\r\n          <option\r\n            key={currency.shortName}\r\n            value={currency.shortName}\r\n          >\r\n          {currency.shortName}\r\n          </option>))}\r\n      </select>\r\n      </label></p>\r\n    <p><label>\r\n    <span className=\"form__labelText\">Podaj kwotę*: </span>\r\n    <input \r\n      value={amount}\r\n      onChange={({target})=> setAmount(target.value)}\r\n      className=\"form__field\"\r\n      name=\"value\" \r\n      type=\"number\" \r\n      required step=\"0.01\"/>\r\n    </label></p>\r\n    <button className=\"form__button\">przelicz</button>\r\n    <ShowResult result = {result} />\r\n  </fieldset>\r\n</form>\r\n\r\n);\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Header = ({title}) => (\r\n  <header className=\"header\">\r\n  <h1 className=\"header__title\">{title}</h1>\r\n</header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = () => (\r\n  <section className=\"section\">\r\n    <p className=\"section__paragraph\">Kursy walut pochodzą ze strony : \r\n    <a \r\n      className=\"section__link\"\r\n      href=\"https://internetowykantor.pl/kursy-walut/\"\r\n      target=\"_blank\" rel=\"noreferrer noopener\">\r\n      \"internetowykantor.pl\"\r\n    </a> \r\n      z dnia 7 lipca 2020\r\n      <span className=\"link__span\"> (otworzy się w nowej karcie)</span>\r\n    </p>\r\n  </section>\r\n);\r\n\r\nexport default Section;","import React from 'react';\r\n\r\nconst Main = ({children}) => (\r\n  <main className=\"main\">\r\n    {children}\r\n  </main>\r\n)\r\n\r\nexport default Main","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Wrapper = ({children}) => (\r\n  <div className=\"wrapper\">\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default Wrapper;","import React, {useState} from 'react';\r\nimport Form from './Form';\r\nimport Header from './Header';\r\nimport Section from './Section';\r\nimport Main from './Main'\r\nimport Wrapper from './Wrapper';\r\nimport currencies from \"./Form/currencies\";\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const [result, setResult] = useState();\r\n  const calculateResult = (currencyHave, currencyWant, amount) => {\r\n\r\n    const currencyHaveRate = currencies.find\r\n      (({ shortName }) => shortName === currencyHave).rate;\r\n\r\n    const currencyWantRate = currencies.find\r\n      (({ shortName }) => shortName === currencyWant).rate;\r\n\r\n    setResult({\r\n      sourceAmount: +amount,\r\n      currencyHave,\r\n      targetAmount: (amount * currencyHaveRate)/currencyWantRate,\r\n      currencyWant,\r\n  });\r\n  };\r\n  \r\n  return (\r\n    <Wrapper>\r\n      <Header title= \"kalkulator walutowy\"/>\r\n        <Main>\r\n        <Form\r\n           result = {result}\r\n           calculateResult = {calculateResult}\r\n        />\r\n          <Section/>\r\n        </Main>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}