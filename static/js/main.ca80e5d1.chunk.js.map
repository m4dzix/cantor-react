{"version":3,"sources":["Form/styled.js","Form/ShowResult/styled.js","Form/ShowResult/index.js","useRates.js","Form/index.js","Header/styled.js","Header/index.js","Section/styled.js","Section/index.js","Main/styled.js","Main/ShowDate/styled.js","Main/ShowDate/index.js","Main/useCurrentDate.js","Main/index.js","Wrapper/styled.js","Wrapper/index.js","App.js","serviceWorker.js","index.js","theme.js"],"names":["StyledForm","styled","form","Paragraph","p","theme","color","tundora","LabelText","span","Span","Select","select","gray","Field","input","Button","button","tacha","black","Fieldset","fieldset","Legend","legend","Information","div","ShowResult","result","undefined","sourceAmount","toFixed","currencyHave","targetAmount","currencyWant","useRates","useState","rates","date","data","setData","useEffect","setTimeout","fetch","then","response","ok","Error","statusText","json","currenciesAPI","ratesAPI","dateAPI","catch","error","console","Form","calculateResult","currencyApiArray","Object","keys","amount","setAmount","setCurrencyHave","setCurrencyWant","onSubmit","event","preventDefault","value","onChange","target","name","map","key","type","required","step","Title","h1","luxorGold","Header","title","className","Link","a","eperor","boulder","Section","href","rel","StyledMain","main","StyledDate","brighterBlack","breakpoint","mobileMax","ShowDate","Date","showDate","setShowDate","intervalId","setInterval","clearInterval","useCurrentDate","toLocaleString","weekday","hour","minute","second","day","month","formatDate","Main","children","Wrap","Wrapper","App","setResult","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","frangipani","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ca80e5d1.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  margin: 10px;\r\n  text-align: center;\r\n  align-self: center;\r\n  width: 100%;\r\n`;\r\nexport const Paragraph = styled.p`\r\n  font-size: 15px;\r\n  color: ${({ theme }) => theme.color.tundora};\r\n`;\r\nexport const LabelText = styled.span`\r\n  display: inline-block;\r\n  text-transform: uppercase;\r\n  padding: 5px 10px;\r\n  font-size: 20px;\r\n`;\r\nexport const Span = styled.span`\r\n  font-size: 10px;\r\n  color: ${({ theme }) => theme.color.tundora};\r\n`;\r\nexport const Select = styled.select`\r\n  padding: 5px;\r\n  border-radius: 10px;\r\n  border: solid 2px ${({ theme }) => theme.color.gray};\r\n`;\r\nexport const Field = styled.input`\r\n  padding: 5px;\r\n  border-radius: 10px;\r\n  border: solid 3px ${({ theme }) => theme.color.gray};\r\n`;\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  background-color: ${({ theme }) => theme.color.tacha};\r\n  text-transform: uppercase;\r\n  padding: 10px;\r\n  border: solid 3px ${({ theme }) => theme.color.black};\r\n  border-radius: 10px;\r\n  margin-top: 20px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    filter: brightness(110%);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n  }\r\n`;\r\nexport const Fieldset = styled.fieldset`\r\n  border: solid 4px ${({ theme }) => theme.color.black};\r\n  background-color: peachpuff;\r\n  border-radius: 10px;\r\n`;\r\nexport const Legend = styled.legend`\r\n  font-size: 30px;\r\n  background-color: ${({ theme }) => theme.color.tacha};\r\n  padding: 5px 15px;\r\n  border: solid 4px ${({ theme }) => theme.color.black};\r\n  border-radius: 10px;\r\n`;\r\nexport const Information = styled.div`\r\n  font-size: 20px;\r\n  margin: 50px;\r\n  text-align: center;\r\n  align-self: center;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Paragraph = styled.p`\r\n  font-size: 30px;\r\n  margin: 10px;\r\n`;\r\n","import React from \"react\";\r\nimport { Paragraph } from \"./styled\";\r\n\r\nconst ShowResult = ({ result }) => (\r\n  <Paragraph>\r\n    {result !== undefined && (\r\n      <>\r\n        {result.sourceAmount.toFixed(2)}&nbsp;{result.currencyHave}&nbsp;= {\"\"}\r\n        {result.targetAmount.toFixed(2)}&nbsp;{result.currencyWant}&nbsp;\r\n      </>\r\n    )}\r\n  </Paragraph>\r\n);\r\n\r\nexport default ShowResult;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useRates = () => {\r\n  const [data, setData] = useState({\r\n    rates: \"\",\r\n    date: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const getApi = () => {\r\n      const currenciesAPI = \"https://api.exchangeratesapi.io/latest?base=PLN\";\r\n\r\n      fetch(currenciesAPI)\r\n        .then((response) => {\r\n          if (!response.ok) {\r\n            throw new Error(response.statusText);\r\n          }\r\n          return response;\r\n        })\r\n        .then((response) => response.json())\r\n        .then((currenciesAPI) => {\r\n          const ratesAPI = currenciesAPI.rates;\r\n          const dateAPI = currenciesAPI.date;\r\n          setData({\r\n            rates: ratesAPI,\r\n            date: dateAPI,\r\n          });\r\n        })\r\n        .catch((error) => console.error(error));\r\n    };\r\n    setTimeout(getApi, 1000);\r\n  }, []);\r\n  return data;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  StyledForm,\r\n  Paragraph,\r\n  LabelText,\r\n  Span,\r\n  Select,\r\n  Field,\r\n  Button,\r\n  Fieldset,\r\n  Legend,\r\n  Information,\r\n} from \"./styled\";\r\nimport ShowResult from \"./ShowResult\";\r\nimport { useRates } from \"../useRates\";\r\n\r\nconst Form = ({ calculateResult, result }) => {\r\n  const { rates } = useRates();\r\n  const currencyApiArray = Object.keys(useRates().rates);\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [currencyHave, setCurrencyHave] = useState(currencyApiArray[1]);\r\n  const [currencyWant, setCurrencyWant] = useState(currencyApiArray[1]);\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    calculateResult(currencyHave, currencyWant, amount);\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onSubmit}>\r\n      <Fieldset>\r\n        <Legend>Wymiana waluty</Legend>\r\n\r\n        {rates ? (\r\n          <>\r\n            <Paragraph>Pole oznaczone * musi zostać wypełnione</Paragraph>\r\n            <p>\r\n              <label>\r\n                <LabelText>\r\n                  wymiana z:\r\n                  <Span>(wybierz walutę)</Span>\r\n                </LabelText>\r\n                <Select\r\n                  value={currencyHave}\r\n                  onChange={({ target }) => setCurrencyHave(target.value)}\r\n                  name=\"currencyHave\"\r\n                >\r\n                  {currencyApiArray.map((currencyApiArray) => (\r\n                    <option key={currencyApiArray} value={currencyApiArray}>\r\n                      {currencyApiArray}\r\n                    </option>\r\n                  ))}\r\n                </Select>\r\n              </label>\r\n            </p>\r\n            <p>\r\n              <label>\r\n                <LabelText>\r\n                  wymiana na:\r\n                  <Span>(wybierz walutę)</Span>\r\n                </LabelText>\r\n                <Select\r\n                  value={currencyWant}\r\n                  onChange={({ target }) => setCurrencyWant(target.value)}\r\n                  name=\"currencyWant\"\r\n                >\r\n                  {currencyApiArray.map((currencyApiArray) => (\r\n                    <option key={currencyApiArray} value={currencyApiArray}>\r\n                      {currencyApiArray}\r\n                    </option>\r\n                  ))}\r\n                </Select>\r\n              </label>\r\n            </p>\r\n            <p>\r\n              <label>\r\n                <LabelText>Podaj kwotę*: </LabelText>\r\n                <Field\r\n                  value={amount}\r\n                  onChange={({ target }) => setAmount(target.value)}\r\n                  name=\"value\"\r\n                  type=\"number\"\r\n                  required\r\n                  step=\"0.01\"\r\n                />\r\n              </label>\r\n            </p>\r\n            <Button>przelicz</Button>\r\n            <ShowResult result={result} />\r\n          </>\r\n        ) : (\r\n          <Information>\r\n            {rates === \"error\"\r\n              ? \"Przepraszamy wystapił błąd, chyba masz problem z internetem, jeśli nie - spróbój później\"\r\n              : \"Poczekaj chwilkę, ładujemy teraz dane z Europejskiego Banku Centralnego \"}\r\n          </Information>\r\n        )}\r\n      </Fieldset>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.h1`\r\n  margin: 10px;\r\n  margin-bottom: 80px;\r\n  padding: 20px 0;\r\n  font-size: 40px;\r\n  text-transform: uppercase;\r\n  text-align: center;\r\n  letter-spacing: 3px;\r\n  background-color: ${({ theme }) => theme.color.luxorGold};\r\n  border-radius: 10px;\r\n`;\r\n","import React from \"react\";\r\nimport { Title } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header className=\"header\">\r\n    <Title>{title}</Title>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Paragraph = styled.p`\r\n  padding: 10px;\r\n  text-align: center;\r\n  font-size: 20px;\r\n  background-color: peachpuff;\r\n  margin: 10px;\r\n  border: 3px solid ${({ theme }) => theme.color.black};\r\n  border-radius: 10px;\r\n`;\r\n\r\nexport const Link = styled.a`\r\n  text-decoration: none;\r\n  color: ${({ theme }) => theme.color.black};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    color: ${({ theme }) => theme.color.eperor};\r\n  }\r\n  &:active {\r\n    color: ${({ theme }) => theme.color.boulder};\r\n  }\r\n`;\r\n\r\nexport const Span = styled.span`\r\n  font-size: 15px;\r\n  color: ${({ theme }) => theme.color.gray};\r\n`;\r\n","import React from \"react\";\r\nimport { Paragraph, Link, Span } from \"./styled\";\r\nimport { useRates } from \"../useRates\";\r\n\r\nconst Section = () => {\r\n  return (\r\n    <section>\r\n      <Paragraph>\r\n        Kursy walut pochodzą ze strony :\r\n        <Link\r\n          href=\"http://exchangeratesapi.io/\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n        >\r\n          {\" \"}\r\n          \"exchangeratesapi.io\"\r\n        </Link>{\" \"}\r\n        <Span> (otworzy się w nowej karcie)</Span> ; są publikowane przez\r\n        Europejski Bank Centralny z dnia: &nbsp;{useRates().date}\r\n      </Paragraph>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledMain = styled.main`\r\n  display: flex;\r\n  align-self: start;\r\n  flex-direction: column;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledDate = styled.p`\r\n  font-family: monospace;\r\n  font-size: 12px;\r\n  align-self: flex-end;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  display: inline-block;\r\n  background-color: ${({ theme }) => theme.color.brighterBlack};\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    text-align: center;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { useCurrentDate } from \"../useCurrentDate\";\r\nimport { StyledDate } from \"./styled\";\r\n\r\nconst formatDate = (date) =>\r\n  date.toLocaleString(undefined, {\r\n    weekday: \"long\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    second: \"2-digit\",\r\n    day: \"numeric\",\r\n    month: \"long\",\r\n  });\r\n\r\nconst ShowDate = () => {\r\n  const date = useCurrentDate();\r\n  return <StyledDate>Aktualna data i godzina: {formatDate(date)}</StyledDate>;\r\n};\r\n\r\nexport default ShowDate;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useCurrentDate = () => {\r\n  const [showDate, setShowDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setShowDate(new Date());\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  return showDate;\r\n};\r\n","import React from \"react\";\r\nimport { StyledMain } from \"./styled\";\r\nimport ShowDate from \"./ShowDate\";\r\n\r\nconst Main = ({ children }) => (\r\n  <StyledMain>\r\n    <ShowDate />\r\n    {children}\r\n  </StyledMain>\r\n);\r\n\r\nexport default Main;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrap = styled.div`\r\n  max-width: 1000px;\r\n  margin: 0 auto;\r\n`;\r\n","import React from \"react\";\r\nimport { Wrap } from \"./styled\";\r\n\r\nconst Wrapper = ({ children }) => <Wrap>{children}</Wrap>;\r\n\r\nexport default Wrapper;\r\n","import React, { useState } from \"react\";\r\nimport Form from \"./Form\";\r\nimport Header from \"./Header\";\r\nimport Section from \"./Section\";\r\nimport Main from \"./Main\";\r\nimport Wrapper from \"./Wrapper\";\r\nimport { useRates } from \"./useRates\";\r\nfunction App() {\r\n  const [result, setResult] = useState();\r\n  const { rates } = useRates();\r\n  const calculateResult = (currencyHave, currencyWant, amount) => {\r\n    setResult({\r\n      sourceAmount: +amount,\r\n      currencyHave,\r\n      targetAmount: (amount * rates[currencyWant]) / rates[currencyHave],\r\n      currencyWant,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Header title=\"kalkulator walutowy\" />\r\n      <Main>\r\n        <Form result={result} calculateResult={calculateResult} />\r\n        <Section />\r\n      </Main>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { theme } from \"./theme\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const theme = {\r\n  color: {\r\n    luxorGold: \"#AC8839\",\r\n    brighterBlack: \"#dddddd\",\r\n    frangipani: \"#FFDAB9\",\r\n    tundora: \"#444444\",\r\n    tacha: \"#D4B268\",\r\n    black: \"#000000\",\r\n    eperor: \"#555555\",\r\n    boulder: \"#777777\",\r\n    gray: \"#888888\",\r\n  },\r\n\r\n  breakpoint: {\r\n    mobileMax: 414,\r\n  },\r\n};\r\n"],"sourceRoot":""}